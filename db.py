from sqlalchemy import select
from sqlalchemy.exc import NoResultFound
from sqlalchemy.orm import Session
from sqlalchemy.orm.exc import UnmappedInstanceError

from model import Fridge, SubCategory, Item, Recipe, User


class DataBase:
    """
        Wrapper class with only static methods
    """

    CATEGORIES = ['fruits', 'vegetables', 'cereals', 'meat', 'fish', 'dairy', 'oils', 'legumes', 'other']

    def __init__(self):
        pass

    # --  Refactor fridge name --
    @staticmethod
    def check_fridge_name(name: str) -> str:
        """
                Refactor fridge's name by making it capitalize if not and adding Fridge to it
                :param name: str name given by user
        """
        if name[-1] == 's':
            return f'{name.capitalize()}\' Fridge'
        else:
            return f'{name.capitalize()}\'s Fridge'

    # -- Make fridge instance  --
    @staticmethod
    def make_fridge(session: Session, fridge_name: str) -> None:
        """
                Make fridge instance with given name and add it to DB
                :param session: Session current app session
                :param fridge_name: str fridge name given by user
        """
        fridge = Fridge(
            name=fridge_name
        )
        session.add(fridge)
        session.commit()

    # --  Check if there is a fridge in DB --
    @staticmethod
    def check_for_fridge(session: Session) -> Fridge:
        """
                Check if there is a fridge in the DB
                :param session: Session current app session
                :return: Fridge instance of the fridge in DB if any, else return empty list
        """
        fridge = select(Fridge).where(Fridge.name != "Change Name")
        item = []
        try:
            item = session.scalars(fridge).one()
            return item
        except NoResultFound:
            return item

    # -- Get the id of a sub category  --
    @staticmethod
    def get_sub_id(session: Session, sub_name: str) -> int:
        """
            Get the id of a sub category of item by given sub category name
            :param session: Session current app session
            :param sub_name: str name of the sub category that have to be found
            :return: id of the searched sub category
        """
        subs = select(SubCategory).where(SubCategory.name == sub_name)
        sub = session.scalars(subs).one()
        return sub.id

    # -- Add item to the fridge  --
    @staticmethod
    def add_item_to_fridge(session: Session, new_item: Item) -> None:
        """
            Add new Item to the DB
            :param session: Session current app session
            :param new_item: Item new food item generated by user to be added to the DB
        """
        session.add(new_item)
        session.commit()

    # -- Add recipe to the fridge  --
    @staticmethod
    def add_recipe_to_fridge(session: Session, new_recipe: Recipe) -> None:
        """
            Add new Recipe to the DB
            :param session: Session current app session
            :param new_recipe: Recipe new recipe object generated by user to be added to the DB
        """
        session.add(new_recipe)
        session.commit()

    # -- Delete item from fridge  --
    @staticmethod
    def delete_item_from_fridge(session: Session, c_item: Item) -> None:
        """
            Delete food item from the DB
            :param session: Session current app session
            :param c_item: Item food item object that have to be deleted from the DB
        """
        cc_item = session.get(Item, c_item.id)
        session.delete(cc_item)
        session.commit()

    # -- Delete items with amount of 0 or almost 0 --
    @staticmethod
    def delete_zero_amount_item_from_fridge(session: Session, all_items: list) -> None:
        """
            Delete food items from the DB if their amount is 0
             or if their unit is 'g or 'ml and their amount is less than 10
            :param session: Session current app session
            :param all_items: list a list of all food item objects in DB that have to be checked if amount is 0
             or less than 10 if their units are 'g' or 'ml'
        """
        for a in all_items:
            if a.amount == '0':
                cc_item = session.get(Item, a.id)
                session.delete(cc_item)
                session.commit()
            if a.unit in ['g', 'ml']:
                if float(a.amount) < 10:
                    cc_item = session.get(Item, a.id)
                    try:
                        session.delete(cc_item)
                    except UnmappedInstanceError:
                        pass
                    session.commit()

    # -- Get food item from Db by name  --
    @staticmethod
    def get_data_for_item_from_name(session: Session, name_item: str) -> list:
        """
            Get food items from the DB by given name
            :param session: Session current app session
            :param name_item: str name of the searched item in the DB
            :return list with only one result if item found or empty list of no item with such name in the DB
        """
        items = select(Item).where(Item.name == name_item)
        item = []
        try:
            item = session.scalars(items).one()
            return [item]
        except NoResultFound:
            return item

    # -- Get a recipe from te DB  --
    @staticmethod
    def check_if_recipe_in_fridge(session: Session, new_recipe: Recipe) -> list:
        """
            Get recipe object from the DB
            :param session: Session current app session
            :param new_recipe: Recipe a recipe object that have to be checked if it is in the DB
            :return list with only one result if recipe object found in DB or empty list of no such recipe in the DB
        """
        try:
            recipes = select(Recipe).where(Recipe.title == new_recipe.title)
            recipe = session.scalars(recipes).one()
            if recipe:
                n_rec = session.get(Recipe, new_recipe.id)
                return [n_rec]
            else:
                return []
        except NoResultFound:
            return []
        except AttributeError:
            return []

    # -- Set new data for food item  --
    @staticmethod
    def set_data_for_item_from_name(session: Session, name_item: str, new_name: str, new_amount: int, new_unit: str,
                                    new_expiry: str, new_sub: str) -> None:
        """
            Set new data for food item in the DB
            :param session: Session current app session
            :param name_item: str name of the food item in the DB
            :param new_name: str the new name of the food item in the DB
            :param new_amount: int the new amount of the food item in the DB
            :param new_unit: str the new unit of the food item in the DB
            :param new_expiry: str the new expiry date of the food item in the DB
            :param new_sub: str the new sub category of the food item in the DB
        """
        items = select(Item).where(Item.name == name_item)
        item = session.scalars(items).one()
        if new_amount == 0:
            td_item = session.get(Item, item.id)
            session.delete(td_item)
            session.commit()
        else:
            item.name = new_name
            item.amount = new_amount
            item.unit = new_unit
            item.expiry = new_expiry
            item.sub = new_sub
            session.commit()

    # -- Get all food items from DB  --
    @staticmethod
    def get_all_items_from_fridge(session: Session, fridge_id: int) -> list:
        """
            Get all food items from the DB connected to specific fridge
            :param session: Session current app session
            :param fridge_id: int id of the fridge that have to be checked for food items
            :return list with all items from the DB connected to the given fridge id
        """
        all_items = []
        items = select(Item).where(Item.fridge_id == fridge_id)
        for item in session.scalars(items):
            all_items.append(item)
        return all_items

    # -- Get all recipes from the DB  --
    @staticmethod
    def get_all_recipes(session: Session, fridge_id: int) -> list:
        """
            Get all recipes from the DB connected to specific fridge
            :param session: Session current app session
            :param fridge_id: int id of the fridge that have to be checked for recipes
            :return list with all recipes from the DB saved to the given fridge id
        """
        all_recipes = []
        recipes = select(Recipe).where(Recipe.fridge_id == fridge_id)
        for recipe in session.scalars(recipes):
            all_recipes.append(recipe)
        return all_recipes

    # -- Get all users from the DB  --
    @staticmethod
    def get_all_users(session: Session, fridge_id: int) -> list:
        """
            Get all users from the DB connected to specific fridge
            :param session: Session current app session
            :param fridge_id: int id of the fridge that have to be checked for recipes
            :return list with all users from the DB connected to the given fridge id
        """
        all_users = []
        users = select(User).where(User.fridge_id == fridge_id)
        for user in session.scalars(users):
            all_users.append(user)
        return all_users

    # -- Delete user form teh DB  --
    @staticmethod
    def del_user_by_user_obj(session: Session, user: User) -> None:
        """
            Delete specific user form the DB
            :param session: Session current app session
            :param user: User specific user given that have to be removed from the DB
        """
        c_user = session.get(User, user.id)
        session.delete(c_user)
        session.commit()

    # -- Get all sub categories from the DB  --
    @staticmethod
    def get_all_sub_cat(session: Session) -> list:
        """
            Get all sub categories from the DB
            :param session: Session current app session
            :return list with all sub categories from the DB
        """
        all_sub_cat = session.query(SubCategory).all()
        return all_sub_cat
